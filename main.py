import datetime

import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import telebot

from config import TOKEN

plt.style.use('ggplot')

bot = telebot.TeleBot(TOKEN)
df = pd.read_excel('TestBD_xlsx.xlsx', engine='openpyxl')


def send_ranked_list(message, dataframe):
    ranked_list_str = '*–¢–≤–æ–∏ —Ñ–∏–ª—å–º—ã*\n'
    ranked_list_str += dataframe.sort_values('score', ignore_index=True).head().to_string(columns=['name', 'score'],
                                                                                          header=False,
                                                                                          index=True,
                                                                                          ).replace('  ', ' ')
    bot.send_message(message.chat.id, ranked_list_str)


def send_ranked_list_more(message, dataframe):
    ranked_df = dataframe.sort_values('score', ignore_index=True)
    bot.send_message(message.chat.id, '<b>–¢–≤–æ–π –¢–û–ü 5 —Ñ–∏–ª—å–º–æ–≤</b>\n', parse_mode='HTML')
    nums = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£']
    for i in range(0, 5):
        strg = ranked_df.iloc[i]
        bot.send_message(message.chat.id,
                         '{:<} <b>{:<}</b>, {:<}\n'.format(nums[i], strg[0], strg[1]) +
                         '\U0001F30F {:<}\n\U00002B50 {:<}\n'.format(strg[2], strg[3]) +
                         '<i>{:<}</i>\n\U000023F3 –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {:4<}–º–∏–Ω\n'.format(
                             strg[4].replace(']', ' ').replace('[', ' '), strg[9]) +
                         '\U00002B55 {:4<}+\n–û–ø–∏—Å–∞–Ω–∏–µ: {:<}'.format(strg[11], strg[7]), parse_mode='HTML')


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –¥—Ä—É–≥-–∫–∏–Ω–æ—Å–æ–≤–µ—Ç—á–∏–∫ üí´')
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –±—ã–≤–∞–ª–æ —Ç–∞–∫–æ–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ—Å–∏—à—å –¥—Ä—É–∑–µ–π ' +
                     '–ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º, –∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ—Ç –≤—Å–ø–æ–º–Ω–∏—Ç—å:(' +
                     '\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º!')
    bot.send_message(message.chat.id, '–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏–ª–∏ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è ' +
                     '–ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏. –í —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º, ' +
                     '–º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ä—è–¥ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (–∏ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏–∫–æ–≥–æ ' +
                     '–º—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å–∞–º–∏)')
    bot.send_message(message.chat.id, '–¢–∞–∫ —Ç—ã —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –¥—É—à–µ:)')
    bot.send_message(message.chat.id,
                     '/choose ‚Äì –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ ü§™')


@bot.message_handler(commands=['choose'])
def start_choose(message):
    df['score'] = 0
    df.index = np.arange(1, len(df) + 1)
    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.row('–ì–æ—Ç–æ–≤!', '–ù–µ—Ç')
    bot.send_message(message.chat.id,
                     '–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä —Ñ–∏–ª—å–º–∞! –°–µ–π—á–∞—Å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ ' + str(len(df.index)) + ' –∫—Ä—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤. ' +
                     '–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ —Ä—è–¥ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –Ω–∞–π–¥—ë–º –ª—É—á—à–∏–π.')
    bot.send_message(message.chat.id, '–¢—ã –≥–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å?', reply_markup=keyboard)
    bot.register_next_step_handler(message, send_first_q)


def send_first_q(message):
    if message.text.lower() == '–Ω–µ—Ç':
        bot.send_message(message.chat.id, '–ù—É, –Ω–∞ –Ω–µ—Ç –∏ —Å—É–¥–∞ –Ω–µ—Ç')
        bot.register_next_step_handler(message, start_message)
    else:
        bot.send_message(message.chat.id, '1Ô∏è‚É£ –û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç -5 –¥–æ 5, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–∏–Ω–∞–º–∏—á–Ω—ã–º')
        bot.send_message(message.chat.id, '–°–ø–æ–∫–æ–π–Ω—ã–π üòå -5  ‚Äì‚Äì‚Äì  5 üòà –î–∏–Ω–∞–º–∏—á–Ω—ã–π')
        bot.register_next_step_handler(message, get_x_coor)


def get_x_coor(message):
    user_x_coor = message.text
    if user_x_coor.lstrip('-').isdigit():
        user_x_coor = int(user_x_coor)
        if (-5 <= user_x_coor) and (user_x_coor <= 5):
            bot.send_message(message.chat.id, '2Ô∏è‚É£ –ê –ø–æ —Ç–∞–∫–æ–π —à–∫–∞–ª–µ?')
            bot.send_message(message.chat.id, '–ù–∞ –ø–æ–¥—É–º–∞—Ç—å ü§î -5  ‚Äì‚Äì‚Äì  5 –ü–æ—á–∏–ª–ª–∏—Ç—å üòé')
            bot.register_next_step_handler(message, get_y_coor, user_x_coor)
        else:
            bot.send_message(message.chat.id,
                             '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–π —à–∫–∞–ª–µ:(' +
                             ' –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ 1.')
            bot.register_next_step_handler(message, get_x_coor)
    else:
        bot.send_message(message.chat.id, '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ 1.')
        bot.register_next_step_handler(message, get_x_coor)


def get_y_coor(message, user_x_coor):
    user_y_coor = message.text
    if user_y_coor.lstrip('-').isdigit():
        user_y_coor = int(user_y_coor)
        if (-5 <= user_y_coor) and (user_y_coor <= 5):
            df.score = np.power(df.coord_x - user_x_coor, 2) + np.power(df.coord_y - user_y_coor, 2)
            df.score = df.score.rank()
            df.loc[df['score'] > 5, 'score'] = 5
            send_ranked_list(message, df)

            keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
            keyboard.row('–û–¥–∏–Ω', '–° –¥—Ä—É–∑—å—è–º–∏')

            bot.send_message(message.chat.id, '3Ô∏è‚É£ –° –∫–µ–º —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º?', reply_markup=keyboard)
            bot.register_next_step_handler(message, get_need_company)
        else:
            bot.send_message(message.chat.id,
                             '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–π —à–∫–∞–ª–µ:(' +
                             ' –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ 1.')
            bot.register_next_step_handler(message, get_y_coor)
    else:
        bot.send_message(message.chat.id, '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ 1.')
        bot.register_next_step_handler(message, get_y_coor)


def get_need_company(message):
    if message.text.lower() == '–æ–¥–∏–Ω':
        df.loc[df['need_company'] == 0, 'score'] += 1
        df.loc[df['need_company'] != 0, 'score'] += 5
        send_ranked_list(message, df)
        bot.send_message(message.chat.id, '4Ô∏è‚É£ –ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∂–µ–ª–∞–µ–º—ã–π –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–∞')
        bot.register_next_step_handler(message, get_year)

    elif message.text.lower() == '—Å –¥—Ä—É–∑—å—è–º–∏':
        df.loc[df['need_company'] == 0, 'score'] += 5
        df.loc[df['need_company'] != 0, 'score'] += 1
        send_ranked_list(message, df)
        bot.send_message(message.chat.id, '4Ô∏è‚É£ –ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∂–µ–ª–∞–µ–º—ã–π –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–∞')
        bot.register_next_step_handler(message, get_year)

    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–æ–¥–∏–Ω" –∏ "—Å –¥—Ä—É–∑—å—è–º–∏")')
        bot.register_next_step_handler(message, get_need_company)


def get_year(message):
    user_year = message.text
    if user_year.isdigit():
        user_year = int(user_year)
        now = datetime.datetime.now()
        if (1895 <= user_year) and (user_year <= int(now.year)):
            df.loc[np.absolute(df['year'] - user_year) < 5, 'score'] += np.absolute(df['year'] - user_year) + 1
            df.loc[np.absolute(df['year'] - user_year) >= 5, 'score'] += 5
            send_ranked_list(message, df)
            bot.send_message(message.chat.id, '5Ô∏è‚É£ –ö–∞–∫–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ?\n' +
                             '–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10')
            bot.register_next_step_handler(message, get_rating_company)
        else:
            bot.send_message(message.chat.id, '–¢—ã –≤—ã–±—Ä–∞–ª –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å–º–∞... ' +
                             '–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ 2014.')
            bot.register_next_step_handler(message, get_year)
    else:
        bot.send_message(message.chat.id, '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ 2014.')
        bot.register_next_step_handler(message, get_year)


def get_rating_company(message):
    user_rating = message.text
    if user_rating.isdigit():
        user_rating = int(user_rating)
        if (0 <= user_rating) and (user_rating <= 10):
            df.loc[df['rating'] >= user_rating, 'score'] += 1
            df.loc[df['rating'] < user_rating, 'score'] += 5
            send_ranked_list(message, df)

            keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
            keyboard.row('–õ—é–±–ª—é –Ω–∞—à–µ',
                         '–õ—é–±–ª—é –∑–∞—Ä—É–±–µ–∂', )

            bot.send_message(message.chat.id, '6Ô∏è‚É£ –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–ª–∏ –∑–∞—Ä—É–±–µ–∂–Ω—ã–π —Ñ–∏–ª—å–º?', reply_markup=keyboard)
            bot.register_next_step_handler(message, get_origin)
        else:
            bot.send_message(message.chat.id, '–û—Ü–µ–Ω–∫–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10\n' +
                             '–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ 8.')
            bot.register_next_step_handler(message, get_rating_company)

    else:
        bot.send_message(message.chat.id, '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏ 7.')
        bot.register_next_step_handler(message, get_rating_company)


def get_origin(message):
    if message.text == '–õ—é–±–ª—é –Ω–∞—à–µ':
        df.loc[df['origin'] == '–æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', 'score'] += 1
        df.loc[df['origin'] == '–∑–∞—Ä—É–±–µ–∂–Ω—ã–π', 'score'] += 5
        go_to_genres(message)

    elif message.text == '–õ—é–±–ª—é –∑–∞—Ä—É–±–µ–∂':
        df.loc[df['origin'] == '–æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', 'score'] += 5
        df.loc[df['origin'] == '–∑–∞—Ä—É–±–µ–∂–Ω—ã–π', 'score'] += 1
        go_to_genres(message)

    else:
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é(\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, get_origin)


def go_to_genres(message):
    send_ranked_list(message, df)
    bot.send_message(message.chat.id, '–ó–¥–æ—Ä–æ–≤–æ!\n7Ô∏è‚É£ –°–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π –≤—ã–±–æ—Ä: —Ñ–∏–ª—å–º –∫–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')
    genres_set = set(df['genre'].sum().replace(']', ' ').replace('[', ' ').replace(',', ' ').split())
    s = '- '
    for x in genres_set:
        s += '{} - '.format(x)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ—á–µ—à—å –∏ –Ω–∞–ø–∏—à–∏ –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')
    bot.send_message(message.chat.id, s)
    bot.register_next_step_handler(message, get_genre, genres_set)


def get_genre(message, genres_set):
    user_genres_str = message.text.lower()
    user_genres = set(user_genres_str.split())
    if user_genres <= genres_set:
        rank_step = 5 / len(user_genres)
        df.score += 6
        for i in user_genres:
            df.loc[df['genre'].str.contains(i), 'score'] -= rank_step
        send_ranked_list(message, df)
        platforms_set = set(df['platform'].sum().replace(']', ' ').replace('[', ' ').replace(',', ' ').split())
        s = '- '
        for x in platforms_set:
            s += '{} - '.format(x)
        bot.send_message(message.chat.id,
                         '8Ô∏è‚É£ –ê –∫–∞–∫—É—é –ø–ª–∞—Ç—Ñ—Ä–æ–º—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞? –£–∫–∞–∂–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ' +
                         '–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')
        bot.send_message(message.chat.id, s)
        bot.register_next_step_handler(message, get_platform, platforms_set)
    else:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–µ–ª —Ñ–∏–ª—å–º—ã —Ç–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞. ' +
                         '–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –∂–∞–Ω—Ä—ã')
        bot.register_next_step_handler(message, get_genre, genres_set)


def get_platform(message, platforms_set):
    user_platforms_str = message.text.lower()
    user_platforms = user_platforms_str.split()
    user_platforms = list(dict.fromkeys(user_platforms))
    if set(user_platforms) <= platforms_set:
        rank_step = 5 / len(user_platforms)
        df.score += 6
        step = rank_step / (len(user_platforms))
        for i in user_platforms:
            df.loc[df['platform'].str.contains(i), 'score'] -= rank_step
            rank_step -= step
        send_ranked_list(message, df)
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.row('–ü–æ–∫–æ—Ä–æ—á–µ',
                     '–ü–æ–¥–ª–∏–Ω–Ω–µ–µ')
        bot.send_message(message.chat.id, '9Ô∏è‚É£ –õ—é–±–∏—à—å —Ñ–∏–ª—å–º—ã –ø–æ–¥–ª–∏–Ω–Ω–µ–µ –∏–ª–∏ –ø–æ–∫–æ—Ä–æ—á–µ?', reply_markup=keyboard)
        bot.register_next_step_handler(message, get_time)
    else:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –Ω–∞ —Ç–≤–æ–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. ' +
                         '–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã')
        bot.register_next_step_handler(message, get_platform, platforms_set)


def get_time(message):
    movie_length = message.text.lower()
    print(movie_length)
    avg_length = df['duration'].mean()
    if movie_length == '–ø–æ–∫–æ—Ä–æ—á–µ':
        df.loc[df['duration'] < avg_length, 'score'] += 1
        df.loc[df['duration'] >= avg_length, 'score'] += 5
        go_to_budget(message)
    elif movie_length == '–ø–æ–¥–ª–∏–Ω–Ω–µ–µ':
        df.loc[df['duration'] < avg_length, 'score'] += 5
        df.loc[df['duration'] >= avg_length, 'score'] += 1
        go_to_budget(message)
    else:
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é :(\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, get_time)


def go_to_budget(message):
    send_ranked_list(message, df)
    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.row('–ë—é–¥–∂–µ—Ç –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ',
                 '–ë—é–¥–∂–µ—Ç –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ',
                 '–°—Ä–µ–¥–Ω–∏–π –±—é–¥–∂–µ—Ç')
    bot.send_message(message.chat.id, 'üîü –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É —Ç–≤–æ–µ–≥–æ —Ñ–∏–ª—å–º–∞?', reply_markup=keyboard)
    bot.register_next_step_handler(message, get_budget)


def get_budget(message):
    movie_budget = message.text.lower()
    avg_budget = df['budget'].mean()
    print(avg_budget)
    if movie_budget == '–±—é–¥–∂–µ—Ç –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ':
        df.loc[df['budget'] > avg_budget, 'score'] += 1
        df.loc[df['budget'] <= avg_budget, 'score'] += 5
        go_to_pg(message)
    elif movie_budget == '–±—é–¥–∂–µ—Ç –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ':
        df.loc[df['budget'] >= avg_budget, 'score'] += 5
        df.loc[df['budget'] < avg_budget, 'score'] += 1
        go_to_pg(message)
    elif movie_budget == '—Å—Ä–µ–¥–Ω–∏–π –±—é–¥–∂–µ—Ç':
        df.loc[(df['budget'] >= avg_budget - (0.1 * avg_budget)) & (df['budget'] < avg_budget + (0.1 * avg_budget)),
        'score'] += 1
        df.loc[(df['budget'] < avg_budget - (0.1 * avg_budget)) | (df['budget'] > avg_budget + (0.1 * avg_budget)),
        'score'] += 5
        go_to_pg(message)
    else:
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é :(\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, get_budget)


def go_to_pg(message):
    send_ranked_list(message, df)
    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.row('0+',
                 '6+',
                 '12+',
                 '16+',
                 '18+')
    bot.send_message(message.chat.id, '1Ô∏è‚É£1Ô∏è‚É£ –§–∏–ª—å–º—ã —Å –∫–∞–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫?',
                     reply_markup=keyboard)
    bot.register_next_step_handler(message, get_pg)


def get_pg(message):
    user_pg = message.text.lower()
    pg = user_pg.replace('+', '')
    pg = int(pg)
    if user_pg in ['0+', '6+', '12+', '16+', '18+']:
        df.loc[df['pg'] == pg, 'score'] += 1
        df.loc[df['pg'] != pg, 'score'] += 5
        send_ranked_list(message, df)
        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.row('–ö–æ–Ω–µ—á–Ω–æ, –Ω–∞ –ø—Ä–æ–µ–∫—Ç–æ—Ä–µ üìΩ')
        keyboard.row('–ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ üíª', '–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ üì±')

        bot.send_message(message.chat.id, '1Ô∏è‚É£2Ô∏è‚É£ –ù–∞ –∫–∞–∫–æ–º —ç–∫—Ä–∞–Ω–µ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º?', reply_markup=keyboard)
        bot.register_next_step_handler(message, get_screen)
    else:
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é :(\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, get_pg)


def get_screen(message):
    if message.text == '–ö–æ–Ω–µ—á–Ω–æ, –Ω–∞ –ø—Ä–æ–µ–∫—Ç–æ—Ä–µ üìΩ':
        screen_code = 1
    elif message.text == '–ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ üíª':
        screen_code = 2
    elif message.text == '–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ üì±':
        screen_code = 3
    else:
        screen_code = 0
    if screen_code > 0:
        df.loc[df['screen'] - screen_code == 0, 'score'] += 1
        df.loc[df['screen'] - screen_code != 0, 'score'] += 2.5 * np.absolute(df.screen - screen_code)
        send_ranked_list(message, df)

        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.row('–î–∞ ‚úÖ', '–ù–µ—Ç ‚ùå')

        bot.send_message(message.chat.id, '1Ô∏è‚É£3Ô∏è‚É£ "–≠—Ç–æ—Ç —Ñ–∏–ª—å–º —è –±—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–µ–ª –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å". ' +
                         '–•–æ—Ç–µ–ª –±—ã —Å–∫–∞–∑–∞—Ç—å —Ç–∞–∫ –æ —Ñ–∏–ª—å–º–µ, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—à—å?', reply_markup=keyboard)
        bot.register_next_step_handler(message, get_rewatch)
    else:
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é(\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, get_screen)


def get_rewatch(message):
    if message.text in ['–î–∞ ‚úÖ', '–ù–µ—Ç ‚ùå']:
        if message.text == '–î–∞ ‚úÖ':
            df.loc[df['rewatch'] == 1, 'score'] += 1
            df.loc[df['rewatch'] == 0, 'score'] += 5
        elif message.text == '–ù–µ—Ç ‚ùå':
            df.loc[df['rewatch'] == 1, 'score'] += 5
            df.loc[df['rewatch'] == 0, 'score'] += 1
        send_ranked_list(message, df)

        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.row('–î–∞ ‚úÖ', '–ù–µ—Ç ‚ùå')

        bot.send_message(message.chat.id, '1Ô∏è‚É£4Ô∏è‚É£ –ê –ø–æ–∫—É—à–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ö–æ—á–µ—à—å?', reply_markup=keyboard)
        bot.register_next_step_handler(message, get_food)
    else:
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é(\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, get_rewatch)


def get_food(message):
    if message.text in ['–î–∞ ‚úÖ', '–ù–µ—Ç ‚ùå']:
        if message.text == '–î–∞ ‚úÖ':
            df.loc[df['food'] == 1, 'score'] += 1
            df.loc[df['food'] == 0, 'score'] += 5
        elif message.text == '–ù–µ—Ç ‚ùå':
            df.loc[df['food'] == 1, 'score'] += 5
            df.loc[df['food'] == 0, 'score'] += 1
        send_ranked_list(message, df)

        keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
        keyboard.row('–î–∞ ‚úÖ', '–ù–µ—Ç ‚ùå')

        bot.send_message(message.chat.id, '1Ô∏è‚É£5Ô∏è‚É£ –ü–æ–¥ –ù–æ–≤—ã–π –≥–æ–¥ –≤—ã–±–∏—Ä–∞–µ—à—å —Ñ–∏–ª—å–º?)', reply_markup=keyboard)
        bot.register_next_step_handler(message, get_new_year)
    else:
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é(\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, get_rewatch)


def get_new_year(message):
    if message.text in ['–î–∞ ‚úÖ', '–ù–µ—Ç ‚ùå']:
        if message.text == '–î–∞ ‚úÖ':
            df.loc[df['new_year'] == 1, 'score'] += 1
            df.loc[df['new_year'] == 0, 'score'] += 5
        elif message.text == '–ù–µ—Ç ‚ùå':
            df.loc[df['new_year'] == 1, 'score'] += 5
            df.loc[df['new_year'] == 0, 'score'] += 1

        bot.send_message(message.chat.id, '–§—É—É—É—É—Ö. –¢—ã –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É! –õ–æ–≤–∏ —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤')
        send_ranked_list_more(message, df)
        bot.register_next_step_handler(message, get_new_year)
    else:
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é(\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, get_rewatch)


if __name__ == '__main__':
    bot.enable_save_next_step_handlers(delay=4)
    bot.polling()
